---
interface Image {
  url: string;
  alt: string;
  title?: string;
}

interface Props {
  images: Image[];
  autoAdvance?: boolean;
  autoAdvanceInterval?: number;
}

const { images, autoAdvance = true, autoAdvanceInterval = 5000 } = Astro.props;
const carouselId = `image-carousel-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="image-carousel-container relative overflow-hidden rounded-lg bg-neutral-100 dark:bg-neutral-800" id={carouselId}>
  <!-- Carousel Track -->
  <div class="image-carousel-track flex transition-transform duration-500 ease-in-out" style="width: {images.length * 100}%">
    {images.map((image, index) => (
      <div class="image-slide flex-shrink-0 w-full h-64 md:h-80 lg:h-96">
        <img
          src={image.url}
          alt={image.alt}
          title={image.title}
          class="w-full h-full object-cover rounded-lg"
          loading={index === 0 ? "eager" : "lazy"}
        />
        <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4 rounded-b-lg">
          <h4 class="text-white font-semibold text-lg">{image.title}</h4>
        </div>
      </div>
    ))}
  </div>

  <!-- Navigation Arrows -->
  {images.length > 1 && (
    <>
      <!-- Previous Button -->
      <button
        class="image-carousel-prev absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white dark:bg-neutral-800/80 dark:hover:bg-neutral-700 text-neutral-800 dark:text-white rounded-full p-2 shadow-lg transition-all duration-200 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-blue-500"
        aria-label="Imaginea anterioară"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>

      <!-- Next Button -->
      <button
        class="image-carousel-next absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white dark:bg-neutral-800/80 dark:hover:bg-neutral-700 text-neutral-800 dark:text-white rounded-full p-2 shadow-lg transition-all duration-200 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-blue-500"
        aria-label="Imaginea următoare"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </>
  )}

  <!-- Dots Indicator -->
  {images.length > 1 && (
    <div class="image-carousel-dots absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
      {images.map((_, index) => (
        <button
          class="image-carousel-dot w-3 h-3 rounded-full bg-white/50 hover:bg-white/80 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
          data-slide={index}
          aria-label={`Mergi la imaginea ${index + 1}`}
        ></button>
      ))}
    </div>
  )}

  <!-- Image Counter -->
  {images.length > 1 && (
    <div class="image-carousel-counter absolute top-4 right-4 bg-black/50 text-white px-3 py-1 rounded-full text-sm font-medium">
      <span class="image-current-slide">1</span> / <span class="image-total-slides">{images.length}</span>
    </div>
  )}
</div>

<style>
  .image-carousel-container {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  
  .image-carousel-container::-webkit-scrollbar {
    display: none;
  }
  
  .image-carousel-track {
    scroll-behavior: smooth;
  }
  
  .image-slide {
    scroll-snap-align: start;
  }
</style>

<script>
  function initializeImageCarousel(carouselId: string) {
    const carousel = document.getElementById(carouselId);
    if (!carousel) return;

    const track = carousel.querySelector('.image-carousel-track') as HTMLElement;
    const prevBtn = carousel.querySelector('.image-carousel-prev') as HTMLButtonElement;
    const nextBtn = carousel.querySelector('.image-carousel-next') as HTMLButtonElement;
    const dots = carousel.querySelectorAll('.image-carousel-dot');
    const currentSlideSpan = carousel.querySelector('.image-current-slide') as HTMLElement;
    const totalSlidesSpan = carousel.querySelector('.image-total-slides') as HTMLElement;

    if (!track || !prevBtn || !nextBtn) return;

    let currentSlide = 0;
    let autoAdvanceInterval: any = null;
    const totalSlides = dots.length;

    // Update total slides display
    if (totalSlidesSpan) {
      totalSlidesSpan.textContent = totalSlides.toString();
    }

    function showSlide(index: number) {
      if (index < 0) index = totalSlides - 1;
      if (index >= totalSlides) index = 0;
      
      currentSlide = index;
      track.style.transform = `translateX(-${index * (100 / totalSlides)}%)`;
      
      // Update dots
      dots.forEach((dot, i) => {
        dot.classList.toggle('bg-white', i === index);
        dot.classList.toggle('bg-white/50', i !== index);
      });
      
      // Update counter
      if (currentSlideSpan) {
        currentSlideSpan.textContent = (index + 1).toString();
      }
    }

    function nextSlide() {
      showSlide(currentSlide + 1);
    }

    function prevSlide() {
      showSlide(currentSlide - 1);
    }

    function startAutoAdvance() {
      if (autoAdvanceInterval) {
        clearInterval(autoAdvanceInterval);
      }
      
      autoAdvanceInterval = setInterval(() => {
        nextSlide();
      }, 5000);
    }

    function stopAutoAdvance() {
      if (autoAdvanceInterval) {
        clearInterval(autoAdvanceInterval);
        autoAdvanceInterval = null;
      }
    }

    // Event listeners
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        prevSlide();
        stopAutoAdvance();
        startAutoAdvance();
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        nextSlide();
        stopAutoAdvance();
        startAutoAdvance();
      });
    }

    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        showSlide(index);
        stopAutoAdvance();
        startAutoAdvance();
      });
    });

    // Keyboard navigation
    carousel.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
        stopAutoAdvance();
        startAutoAdvance();
      } else if (e.key === 'ArrowRight') {
        nextSlide();
        stopAutoAdvance();
        startAutoAdvance();
      }
    });

    // Pause auto-advance on hover
    carousel.addEventListener('mouseenter', stopAutoAdvance);
    carousel.addEventListener('mouseleave', startAutoAdvance);

    // Touch/swipe support
    let startX = 0;
    let endX = 0;

    carousel.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
    });

    carousel.addEventListener('touchend', (e) => {
      endX = e.changedTouches[0].clientX;
      const diff = startX - endX;
      
      if (Math.abs(diff) > 50) { // Minimum swipe distance
        if (diff > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
        stopAutoAdvance();
        startAutoAdvance();
      }
    });

    // Initialize
    showSlide(0);
    startAutoAdvance();

    // Cleanup function
    return () => {
      stopAutoAdvance();
    };
  }

  // Initialize all image carousels when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    const imageCarousels = document.querySelectorAll('[id^="image-carousel-"]');
    imageCarousels.forEach(carousel => {
      if (carousel instanceof HTMLElement) {
        initializeImageCarousel(carousel.id);
      }
    });
  });
</script>
