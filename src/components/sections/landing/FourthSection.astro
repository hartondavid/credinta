---
// Import the necessary dependencies
import { Image } from "astro:assets";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
import ReviewComponent from "@components/ui/blocks/ReviewComponent.astro";
import VideoCarousel from "@components/ui/blocks/VideoCarousel.astro";
import FormatQuoteIcon from "@mui/icons-material/FormatQuote";
import AvatarTestimonialSection from "../../ui/avatars/AvatarTestimonialSection.astro";

// Define props from Astro
const {
  title,
  subTitle,
  primaryBtn,
  primaryBtnURL,
  secondaryBtn,
  secondaryBtnURL,
  withReview,
  avatars,
  starCount,
  rating,
  reviews,
  src,
  alt,
  secondSubTitle,
  thirdSubTitle,
  videos,
} = Astro.props;

// Define TypeScript interface for props
interface Video {
  id: string;
  title: string;
  description?: string;
  thumbnail?: string;
  youtubeId: string;
}

interface Props {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  withReview?: boolean;
  avatars?: Array<string>;
  starCount?: number;
  rating?: string;
  reviews?: string;
  src?: any;
  alt?: string;
  secondSubTitle?: string;
  thirdSubTitle?: string;
  videos?: Video[];
}
---

<!-- Defining a grid container that holds all the content -->
<section
  class="mx-auto grid max-w-[85rem] gap-4 px-4 py-14 sm:px-6 md:grid-cols-2 md:items-center md:gap-8 lg:px-8 2xl:max-w-full"
>
  <!-- Hero Video Carousel Section -->
  <div class="fade-in-element flex w-full" data-delay="0">
    <div class="top-12 w-full overflow-hidden">
      {
        videos && videos.length > 0 ? (
          <VideoCarousel videos={videos} />
        ) : src && alt ? (
          <Image
            src={src}
            alt={alt}
            class="h-full w-full scale-110 object-cover object-center"
            draggable={"false"}
            loading={"eager"}
            format={"avif"}
          />
        ) : null
      }
    </div>
  </div>
  <!-- Title and description -->
  <div>
    <div
      class="mx-auto mb-6 w-3/4 max-w-2xl text-center sm:mb-10 md:mb-6 lg:mx-0 lg:w-1/2 lg:text-left"
    >
      <!-- Each h1 and p tag renders a portion of the title and subTitle defined above -->
      <h1
        class="fade-in-element block text-2xl font-bold tracking-tight text-balance text-black sm:text-2xl lg:text-3xl lg:leading-tight dark:text-neutral-200"
        data-delay="200"
      >
        <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
        <Fragment set:html={title} />
      </h1>
    </div>
    {
      subTitle && (
      <div class="flex h-auto">
                <div class="flex flex-col rounded-xl bg-yellow-50/60 dark:bg-neutral-700 h-full border-t-5 border-indigo-600 dark:border-yellow-400">
                  <div class="flex-auto p-4 md:p-6">
                    <!-- Testimonial content -->
                    <p class="text-pretty text-base italic text-black dark:text-white md:text-lg">
                      <FormatQuoteIcon  style={{ transform: 'rotate(180deg)' }} />
                      {subTitle}
                     
                    </p>
                    <p class="text-pretty text-base italic text-black dark:text-white md:text-lg ">
                      <Fragment set:html={secondSubTitle} />
                      <FormatQuoteIcon />
                    </p>
                   
                  </div>

                  <div class="rounded-b-xl bg-neutral-300/30 p-4 dark:bg-neutral-900/30 md:px-7">
                    <div class="flex items-center">
                      <AvatarTestimonialSection
                        src={src}
                        alt={alt || ""}
                      />

                      <div class="ms-3 grow">
                        <p class="text-sm font-bold text-neutral-800 dark:text-neutral-200 sm:text-base">
                          {'Iulian Vasile'}
                        </p>
                        <p class="text-xs text-neutral-600 dark:text-neutral-400">
                          {'Președinte al Clubului Sportiv Călărași Warriors'}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
      )
    }
    <!-- {
      secondSubTitle && (
        <p
          class="fade-in-element mt-3 text-lg leading-relaxed text-pretty text-black lg:w-4/5 dark:text-neutral-200"
          data-delay="600"
        >
          <Fragment set:html={secondSubTitle} />
          <FormatQuoteIcon />
        </p>
      )
    } -->
    {
      thirdSubTitle && (
        <p
          class="fade-in-element mt-3 text-lg leading-relaxed text-pretty text-black lg:w-4/5 dark:text-neutral-400"
          data-delay="800"
        >
          {thirdSubTitle}
        </p>
      )
    }
    <!-- Action Button Section: This section includes two CTAs with their own styles and URL -->
    <div
      class="fade-in-element mt-7 grid w-full gap-3 sm:inline-flex"
      data-delay="1000"
    >
      {primaryBtn && <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />}
      {
        secondaryBtn && (
          <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
        )
      }
    </div>

    <!-- Review Section: This section presents avatars, review ratings and the number of reviews -->
    {
      withReview ? (
        <div class="fade-in-element" data-delay="1200">
          <ReviewComponent
            avatars={avatars}
            starCount={starCount}
            rating={rating}
            reviews={reviews}
          />
        </div>
      ) : (
        ""
      )
    }
  </div>
</section>

<style>
  .fade-in-element {
    opacity: 0;
    transform: translateY(30px);
    transition:
      opacity 0.8s ease-out,
      transform 0.8s ease-out;
  }

  .fade-in-element.fade-in {
    opacity: 1;
    transform: translateY(0);
  }

  /* Staggered animation delays */
  .fade-in-element[data-delay="0"] {
    transition-delay: 0ms;
  }
  .fade-in-element[data-delay="200"] {
    transition-delay: 200ms;
  }
  .fade-in-element[data-delay="400"] {
    transition-delay: 400ms;
  }
  .fade-in-element[data-delay="600"] {
    transition-delay: 600ms;
  }
  .fade-in-element[data-delay="800"] {
    transition-delay: 800ms;
  }
  .fade-in-element[data-delay="1000"] {
    transition-delay: 1000ms;
  }
  .fade-in-element[data-delay="1200"] {
    transition-delay: 1200ms;
  }
</style>

<script>
  // Intersection Observer for fade-in animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: "0px 0px -50px 0px",
  };

  const fadeInObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const element = entry.target as HTMLElement;
        const delay = parseInt(element.dataset.delay || "0");

        setTimeout(() => {
          element.classList.add("fade-in");
        }, delay);

        // Unobserve after animation is triggered
        fadeInObserver.unobserve(element);
      }
    });
  }, observerOptions);

  // Observe all fade-in elements
  document.addEventListener("DOMContentLoaded", () => {
    const fadeElements = document.querySelectorAll(".fade-in-element");
    fadeElements.forEach((element) => {
      fadeInObserver.observe(element);
    });
  });
</script>
