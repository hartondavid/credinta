---
// Import necessary dependencies

// Define props from Astro
const { videos = [] } = Astro.props;

// Define TypeScript interface for props
interface Video {
  id: string;
  title: string;
  description?: string;
  thumbnail?: string;
  youtubeId: string;
}

interface Props {
  videos: Video[];
}

// Function to generate YouTube thumbnail URL with multiple fallbacks
function getYouTubeThumbnail(youtubeId: string): string {
  // Clean the YouTube ID (remove any extra characters)
  const cleanId = youtubeId.trim();
  // Use the most reliable thumbnail format for production
  return `https://img.youtube.com/vi/${cleanId}/hqdefault.jpg`;
}

// Function to generate YouTube video URL for native player with all controls
function getYouTubeVideoUrl(youtubeId: string, autoplay = false): string {
  const cleanId = youtubeId.trim();
  const autoplayParam = autoplay ? '1' : '0';
  
  // YouTube embed parameters:
  // - autoplay: 1 to autoplay, 0 to not autoplay
  // - mute: 1 to mute, 0 to unmute
  // - rel: 0 to not show related videos
  // - modestbranding: 0 to show YouTube logo and controls
  // - enablejsapi: 1 to enable JavaScript API
  // - controls: 1 to show video controls
  // - showinfo: 1 to show video title and uploader info
  // - iv_load_policy: 3 to disable video annotations
  // - fs: 1 to enable fullscreen button
  // - color: white for white progress bar
  // - theme: dark for dark theme
  // - cc_load_policy: 1 to show closed captions by default
  // - playsinline: 1 to play inline on mobile devices
  
  return `https://www.youtube.com/embed/${cleanId}?autoplay=${autoplayParam}&mute=1&rel=0&modestbranding=0&enablejsapi=1&controls=1&showinfo=1&iv_load_policy=3&fs=1&color=white&theme=dark&cc_load_policy=1&playsinline=1`;
}
---

{videos && videos.length > 0 ? (
  <!-- Video Carousel Container -->
  <div class="relative w-full overflow-hidden rounded-xl">
    <!-- Carousel Container -->
    <div id="second-video-carousel" class="flex transition-transform duration-500 ease-in-out">
      {
        videos.map((video, index) => (
          <div class="w-full flex-shrink-0">
            <div class="relative aspect-video w-full overflow-hidden rounded-xl bg-neutral-100 dark:bg-neutral-800">
              <!-- Video Preview Container -->
              <div class="video-preview-container h-full w-full relative" data-video-index={index}>
                <!-- Video Player (hidden by default, shown when playing) -->
                <div class="video-player-wrapper h-full w-full hidden" data-video-index={index}>
                  <iframe
                    class="h-full w-full rounded-xl"
                    frameborder="0"
                    allowfullscreen
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    loading="lazy"
                    title={video.title}
                    src={getYouTubeVideoUrl(video.youtubeId)}
                  ></iframe>
                  
                  <!-- Custom Controls Overlay (optional - for additional controls) -->
                  <div class="custom-controls-overlay absolute top-4 right-4 flex space-x-2 opacity-0 hover:opacity-100 transition-opacity duration-300">
                    <!-- Volume Control -->
                    <button
                      class="volume-control-btn flex h-10 w-10 items-center justify-center rounded-full bg-black/70 text-white shadow-lg transition-all duration-300 hover:bg-black hover:scale-110"
                      data-video-index={index}
                      title="Toggle Volume"
                    >
                      <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
                      </svg>
                    </button>
                    
                    <!-- Quality Control -->
                    <button
                      class="quality-control-btn flex h-10 w-10 items-center justify-center rounded-full bg-black/70 text-white shadow-lg transition-all duration-300 hover:bg-black hover:scale-110"
                      data-video-index={index}
                      title="Quality Settings"
                    >
                      <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                      </svg>
                    </button>
                    
                    <!-- Close Video Button -->
                    <button
                      class="close-video-btn flex h-10 w-10 items-center justify-center rounded-full bg-black/70 text-white shadow-lg transition-all duration-300 hover:bg-black hover:scale-110"
                      data-video-index={index}
                      title="Close Video"
                    >
                      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                      </svg>
                    </button>
                  </div>
                </div>
                
                <!-- Video Thumbnail (shown when video is not playing) -->
                <div class="video-thumbnail-wrapper h-full w-full absolute inset-0" data-video-index={index}>
                  <!-- Custom Thumbnail or Generated Thumbnail -->
                  {video.thumbnail ? (
                    <img
                      src={video.thumbnail}
                      alt={video.title}
                      class="h-full w-full object-cover rounded-xl"
                      loading="lazy"
                      onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                      onload="this.nextElementSibling.style.display='none';"
                    />
                  ) : video.youtubeId ? (
                    <img
                      src={getYouTubeThumbnail(video.youtubeId)}
                      alt={video.title}
                      class="h-full w-full object-cover rounded-xl"
                      loading="lazy"
                      onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                      onload="this.nextElementSibling.style.display='none';"
                    />
                  ) : null}
                  
                  <!-- Fallback Placeholder (shown when thumbnail fails to load or is blocked) -->
                  <div class="flex h-full w-full items-center justify-center bg-gradient-to-br from-neutral-200 to-neutral-300 dark:from-neutral-700 dark:to-neutral-800 rounded-xl" style={video.thumbnail || video.youtubeId ? 'display: none;' : 'display: flex;'}>
                    <div class="text-center">
                      <div class="relative mx-auto h-16 w-16">
                        <!-- Video Icon Background -->
                        <div class="absolute inset-0 rounded-full bg-neutral-300 dark:bg-neutral-600"></div>
                        <!-- Play Icon -->
                        <svg class="absolute inset-0 h-full w-full text-neutral-500 dark:text-neutral-400" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M8 5v14l11-7z"/>
                        </svg>
                      </div>
                      <p class="mt-4 text-sm font-medium text-neutral-600 dark:text-neutral-300">{video.title}</p>
                      {video.description && (
                        <p class="mt-1 text-xs text-neutral-500 dark:text-neutral-400">{video.description}</p>
                      )}
                    </div>
                  </div>
                  
                  <!-- Play/Pause Button Overlay -->
                  <div class="absolute inset-0 flex items-center justify-center">
                    <button
                      class="play-pause-btn group relative flex h-16 w-16 items-center justify-center rounded-full bg-white/90 shadow-lg transition-all duration-300 hover:bg-white hover:scale-110 dark:bg-neutral-800/90 dark:hover:bg-neutral-800"
                      data-youtube-id={video.youtubeId}
                      data-video-title={video.title}
                      data-video-index={index}
                    >
                      <!-- Play Icon -->
                      <svg class="play-icon ml-1 h-8 w-8 text-neutral-800 transition-colors group-hover:text-yellow-500 dark:text-neutral-200" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z"/>
                      </svg>
                      <!-- Pause Icon (hidden by default) -->
                      <svg class="pause-icon hidden h-8 w-8 text-neutral-800 transition-colors group-hover:text-yellow-500 dark:text-neutral-200" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
                      </svg>
                    </button>
                  </div>
                  
                  <!-- Video Info Overlay -->
                  <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4 text-white rounded-b-xl">
                    <h3 class="text-lg font-semibold">{video.title}</h3>
                    {video.description && (
                      <p class="mt-1 text-sm text-neutral-200">{video.description}</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
    
    <!-- Navigation Arrows -->
    {videos.length > 1 && (
      <>
        <button
          id="second-prev-btn"
          class="absolute left-4 top-1/2 -translate-y-1/2 rounded-full bg-white/90 p-2 shadow-lg transition-all duration-300 hover:bg-white hover:scale-110 dark:bg-neutral-800/90 dark:hover:bg-neutral-800"
        >
          <svg class="h-6 w-6 text-neutral-800 dark:text-neutral-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
          </svg>
        </button>
        
        <button
          id="second-next-btn"
          class="absolute right-4 top-1/2 -translate-y-1/2 rounded-full bg-white/90 p-2 shadow-lg transition-all duration-300 hover:bg-white hover:scale-110 dark:bg-neutral-800/90 dark:hover:bg-neutral-800"
        >
          <svg class="h-6 w-6 text-neutral-800 dark:text-neutral-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
          </svg>
        </button>
      </>
    )}
    
    <!-- Dots Indicator -->
    {videos.length > 1 && (
      <div id="second-carousel-dots" class="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2">
        {
          videos.map((_, index) => (
            <button
              class={`carousel-dot h-2 w-2 rounded-full transition-all duration-300 ${
                index === 0 ? 'bg-white' : 'bg-white/50'
              }`}
              data-slide={index}
            ></button>
          ))
        }
      </div>
    )}
  </div>
) : (
  <!-- Fallback when no videos -->
  <div class="relative aspect-video w-full overflow-hidden rounded-xl bg-neutral-100 dark:bg-neutral-800">
    <div class="flex h-full w-full items-center justify-center bg-neutral-200 dark:bg-neutral-700">
      <div class="text-center">
        <svg class="mx-auto h-16 w-16 text-neutral-400" fill="currentColor" viewBox="0 0 24 24">
          <path d="M8 5v14l11-7z"/>
        </svg>
        <p class="mt-4 text-neutral-500 dark:text-neutral-400">No videos available</p>
      </div>
    </div>
  </div>
)}

<script define:vars={{ totalSlides: videos.length }}>
  let currentSlide = 0;
  let autoAdvanceInterval;
  let currentlyPlayingVideo = null;
  let videoStates = new Map(); // Track play/pause state for each video
  let pageLoaded = false;
  
  function showSlide(index) {
    const carousel = document.getElementById('second-video-carousel');
    if (carousel) {
      carousel.style.transform = `translateX(-${index * 100}%)`;
    }
    
    // Update dots
    const dots = document.querySelectorAll('#second-carousel-dots .carousel-dot');
    dots.forEach((dot, i) => {
      if (dot) {
        dot.classList.toggle('bg-white', i === index);
        dot.classList.toggle('bg-white/50', i !== index);
      }
    });
    
    currentSlide = index;
  }
  
  function nextSlide() {
    if (totalSlides > 1) {
      const next = (currentSlide + 1) % totalSlides;
      showSlide(next);
    }
  }
  
  function previousSlide() {
    if (totalSlides > 1) {
      const prev = (currentSlide - 1 + totalSlides) % totalSlides;
      showSlide(prev);
    }
  }
  
  function goToSlide(index) {
    if (index >= 0 && index < totalSlides) {
      showSlide(index);
    }
  }
  
  function autoPlayAfterNavigation(videoIndex) {
    // Auto-play the video after navigation with a small delay
    setTimeout(() => {
      console.log(`Attempting to auto-play video ${videoIndex}`);
      if (videoIndex >= 0 && videoIndex < totalSlides) {
        // Check if the video container exists
        const videoContainer = document.querySelector(`#second-video-carousel .video-preview-container[data-video-index="${videoIndex}"]`);
        if (videoContainer) {
          console.log(`Found video container for index ${videoIndex}, playing video`);
          playVideo(videoIndex);
        } else {
          console.log(`Video container not found for index ${videoIndex}`);
        }
      } else {
        console.log(`Invalid video index: ${videoIndex}`);
      }
    }, 300); // Small delay to ensure slide transition is complete
  }
  
  function toggleVideo(videoIndex) {
    const previewContainer = document.querySelector(`#second-video-carousel .video-preview-container[data-video-index="${videoIndex}"]`);
    const playerWrapper = previewContainer?.querySelector('.video-player-wrapper');
    const thumbnailWrapper = previewContainer?.querySelector('.video-thumbnail-wrapper');
    const playPauseBtn = previewContainer?.querySelector('.play-pause-btn');
    const playIcon = playPauseBtn?.querySelector('.play-icon');
    const pauseIcon = playPauseBtn?.querySelector('.pause-icon');
    const iframe = playerWrapper?.querySelector('iframe');
    
    if (!previewContainer || !playerWrapper || !thumbnailWrapper || !playPauseBtn) return;
    
    const isCurrentlyPlaying = videoStates.get(videoIndex) || false;
    
    if (isCurrentlyPlaying) {
      // Pause video
      pauseVideo(videoIndex);
    } else {
      // Play video
      playVideo(videoIndex);
    }
  }
  
  function playVideo(videoIndex) {
    console.log(`playVideo called for index ${videoIndex}`);
    
    // Stop any currently playing video first
    if (currentlyPlayingVideo !== null && currentlyPlayingVideo !== videoIndex) {
      console.log(`Stopping current video ${currentlyPlayingVideo}`);
      pauseVideo(currentlyPlayingVideo);
    }
    
    const previewContainer = document.querySelector(`#second-video-carousel .video-preview-container[data-video-index="${videoIndex}"]`);
    if (!previewContainer) {
      console.log(`Preview container not found for video ${videoIndex}`);
      return;
    }
    
    const playerWrapper = previewContainer.querySelector('.video-player-wrapper');
    const thumbnailWrapper = previewContainer.querySelector('.video-thumbnail-wrapper');
    const playPauseBtn = previewContainer.querySelector('.play-pause-btn');
    
    if (!playerWrapper || !thumbnailWrapper || !playPauseBtn) {
      console.log(`Missing required elements for video ${videoIndex}:`, {
        playerWrapper: !!playerWrapper,
        thumbnailWrapper: !!thumbnailWrapper,
        playPauseBtn: !!playPauseBtn
      });
      return;
    }
    
    const iframe = playerWrapper.querySelector('iframe');
    if (!iframe) {
      console.log(`Iframe not found for video ${videoIndex}`);
      return;
    }
    
    console.log(`All elements found for video ${videoIndex}, playing video`);
    
    // Show player and hide thumbnail
    playerWrapper.classList.remove('hidden');
    thumbnailWrapper.classList.add('hidden');
    
    // Update button state
    const playIcon = playPauseBtn.querySelector('.play-icon');
    const pauseIcon = playPauseBtn.querySelector('.pause-icon');
    if (playIcon) playIcon.classList.add('hidden');
    if (pauseIcon) pauseIcon.classList.remove('hidden');
    
    // Set video state
    videoStates.set(videoIndex, true);
    currentlyPlayingVideo = videoIndex;
    
    // Set the iframe source with all controls enabled
    const youtubeId = playPauseBtn.getAttribute('data-youtube-id');
    if (youtubeId) {
      console.log(`Setting iframe src for YouTube ID: ${youtubeId}`);
      iframe.src = `https://www.youtube.com/embed/${youtubeId}?autoplay=1&mute=1&rel=0&modestbranding=0&enablejsapi=1&controls=1&showinfo=1&iv_load_policy=3&fs=1&color=white&theme=dark&cc_load_policy=1&playsinline=1`;
    } else {
      console.log(`No YouTube ID found for video ${videoIndex}`);
    }
  }
  
  function ensureVideoStopped(videoIndex) {
    console.log(`Ensuring video ${videoIndex} is stopped`);
    const previewContainer = document.querySelector(`#second-video-carousel .video-preview-container[data-video-index="${videoIndex}"]`);
    if (previewContainer) {
      const playerWrapper = previewContainer.querySelector('.video-player-wrapper');
      const thumbnailWrapper = previewContainer.querySelector('.video-thumbnail-wrapper');
      const iframe = playerWrapper?.querySelector('iframe');
      
      if (playerWrapper && thumbnailWrapper && iframe) {
        // Hide player and show thumbnail
        playerWrapper.classList.add('hidden');
        thumbnailWrapper.classList.remove('hidden');
        
        // Reset iframe to stop the video
        const youtubeId = previewContainer.querySelector('.play-pause-btn')?.getAttribute('data-youtube-id');
        if (youtubeId) {
          iframe.src = `https://www.youtube.com/embed/${youtubeId}?autoplay=0&mute=1&rel=0&modestbranding=0&enablejsapi=1&controls=1&showinfo=1&iv_load_policy=3&fs=1&color=white&theme=dark&cc_load_policy=1&playsinline=1`;
        }
      }
    }
  }
  
  function stopAllVideos() {
    console.log('Stopping all videos');
    
    // Stop any currently playing video
    if (currentlyPlayingVideo !== null) {
      console.log(`Stopping currently playing video ${currentlyPlayingVideo}`);
      ensureVideoStopped(currentlyPlayingVideo);
      pauseVideo(currentlyPlayingVideo);
    }
    
    // Also stop any videos that might be in a playing state
    for (let i = 0; i < totalSlides; i++) {
      const videoState = videoStates.get(i);
      if (videoState === true) {
        console.log(`Stopping video ${i} that was in playing state`);
        ensureVideoStopped(i);
        pauseVideo(i);
      }
    }
    
    // Clear all video states and currently playing video
    videoStates.clear();
    currentlyPlayingVideo = null;
    console.log('All videos stopped and states cleared');
  }
  
  function pauseVideo(videoIndex) {
    console.log(`pauseVideo called for index ${videoIndex}`);
    
    const previewContainer = document.querySelector(`#second-video-carousel .video-preview-container[data-video-index="${videoIndex}"]`);
    if (!previewContainer) {
      console.log(`Preview container not found for video ${videoIndex}`);
      return;
    }
    
    const playerWrapper = previewContainer.querySelector('.video-player-wrapper');
    const thumbnailWrapper = previewContainer.querySelector('.video-thumbnail-wrapper');
    const playPauseBtn = previewContainer.querySelector('.play-pause-btn');
    const playIcon = playPauseBtn?.querySelector('.play-icon');
    const pauseIcon = playPauseBtn?.querySelector('.pause-icon');
    const iframe = playerWrapper?.querySelector('iframe');
    
    if (previewContainer && playerWrapper && thumbnailWrapper && playPauseBtn && iframe) {
      console.log(`Pausing video ${videoIndex} - hiding player and showing thumbnail`);
      
      // Hide player and show thumbnail
      playerWrapper.classList.add('hidden');
      thumbnailWrapper.classList.remove('hidden');
      
      // Update button state
      if (playIcon) playIcon.classList.remove('hidden');
      if (pauseIcon) pauseIcon.classList.add('hidden');
      
      // Set video state
      videoStates.set(videoIndex, false);
      
      if (currentlyPlayingVideo === videoIndex) {
        currentlyPlayingVideo = null;
        console.log(`Cleared currentlyPlayingVideo - was ${videoIndex}`);
      }
      
      // Reset iframe to initial state (without autoplay) to completely stop the video
      const youtubeId = playPauseBtn.getAttribute('data-youtube-id');
      if (youtubeId) {
        console.log(`Resetting iframe for video ${videoIndex} to stop playback`);
        // Create a completely new iframe src to ensure the video stops
        iframe.src = `https://www.youtube.com/embed/${youtubeId}?autoplay=0&mute=1&rel=0&modestbranding=0&enablejsapi=1&controls=1&showinfo=1&iv_load_policy=3&fs=1&color=white&theme=dark&cc_load_policy=1&playsinline=1`;
      }
    } else {
      console.log(`Cannot pause video ${videoIndex} - missing required elements:`, {
        previewContainer: !!previewContainer,
        playerWrapper: !!playerWrapper,
        thumbnailWrapper: !!thumbnailWrapper,
        playPauseBtn: !!playPauseBtn,
        iframe: !!iframe
      });
    }
  }
  
  function closeVideo(videoIndex) {
    pauseVideo(videoIndex);
  }
  
  function toggleVolume(videoIndex) {
    const previewContainer = document.querySelector(`#second-video-carousel .video-preview-container[data-video-index="${videoIndex}"]`);
    const iframe = previewContainer?.querySelector('iframe');
    const volumeBtn = previewContainer?.querySelector('.volume-control-btn');
    
    if (iframe && volumeBtn) {
      // Toggle mute/unmute by modifying the iframe src
      const currentSrc = iframe.src;
      if (currentSrc.includes('mute=1')) {
        // Unmute
        iframe.src = currentSrc.replace('mute=1', 'mute=0');
        volumeBtn.innerHTML = `
          <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
          </svg>
        `;
      } else {
        // Mute
        iframe.src = currentSrc.replace('mute=0', 'mute=1');
        volumeBtn.innerHTML = `
          <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
          </svg>
        `;
      }
    }
  }
  
  function startAutoplay() {
    if (pageLoaded && totalSlides > 0) {
      // Start playing the first video automatically after a short delay
      setTimeout(() => {
        if (currentlyPlayingVideo === null) {
          // Check if the page is fully loaded and user hasn't interacted yet
          const firstVideoContainer = document.querySelector(`#second-video-carousel .video-preview-container[data-video-index="0"]`);
          if (firstVideoContainer && !firstVideoContainer.classList.contains('user-interacted')) {
            playVideo(0);
          }
        }
      }, 1500); // 1.5 second delay after page load for better user experience
    }
  }
  
  // Initialize carousel when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Only initialize if there are videos
    if (totalSlides === 0) return;
    
    pageLoaded = true;
    
    // Play/Pause video buttons
    const playPauseButtons = document.querySelectorAll('#second-video-carousel .play-pause-btn');
    playPauseButtons.forEach(button => {
      button.addEventListener('click', function() {
        const videoIndex = this.getAttribute('data-video-index');
        if (videoIndex !== null) {
          // Mark user interaction
          const videoContainer = this.closest('.video-preview-container');
          if (videoContainer) {
            videoContainer.classList.add('user-interacted');
          }
          toggleVideo(parseInt(videoIndex));
        }
      });
    });
    
    // Custom controls
    const volumeButtons = document.querySelectorAll('#second-video-carousel .volume-control-btn');
    volumeButtons.forEach(button => {
      button.addEventListener('click', function() {
        const videoIndex = this.getAttribute('data-video-index');
        if (videoIndex !== null) {
          toggleVolume(parseInt(videoIndex));
        }
      });
    });
    
    const closeButtons = document.querySelectorAll('#second-video-carousel .close-video-btn');
    closeButtons.forEach(button => {
      button.addEventListener('click', function() {
        const videoIndex = this.getAttribute('data-video-index');
        if (videoIndex !== null) {
          closeVideo(parseInt(videoIndex));
        }
      });
    });
    
    const qualityButtons = document.querySelectorAll('#second-video-carousel .quality-control-btn');
    qualityButtons.forEach(button => {
      button.addEventListener('click', function() {
        const videoIndex = this.getAttribute('data-video-index');
        if (videoIndex !== null) {
          // Quality control is handled by YouTube's native controls
          // This button can be used for custom quality settings if needed
          console.log('Quality control clicked for video:', videoIndex);
        }
      });
    });
    
    // Navigation buttons
    const prevBtn = document.getElementById('second-prev-btn');
    const nextBtn = document.getElementById('second-next-btn');
    
    if (prevBtn) {
      prevBtn.addEventListener('click', function() {
        console.log('Previous button clicked');
        
        // Mark user interaction
        document.querySelectorAll('#second-video-carousel .video-preview-container').forEach(container => {
          container.classList.add('user-interacted');
        });
        
        // Stop all videos before navigation
        stopAllVideos();
        
        // Store the current slide before navigation
        const previousSlideIndex = currentSlide;
        
        // Navigate to previous slide
        previousSlide();
        console.log(`Navigated from slide ${previousSlideIndex} to slide ${currentSlide}`);
        
        // Auto-play the new video after navigation with a longer delay to ensure everything is ready
        setTimeout(() => {
          console.log(`Auto-playing video for slide ${currentSlide}`);
          if (currentSlide >= 0 && currentSlide < totalSlides) {
            // Double-check that no video is currently playing
            if (currentlyPlayingVideo === null) {
              playVideo(currentSlide);
            } else {
              console.log(`Video ${currentlyPlayingVideo} is still playing, waiting...`);
              // Wait a bit more and try again
              setTimeout(() => {
                if (currentlyPlayingVideo === null) {
                  playVideo(currentSlide);
                }
              }, 200);
            }
          }
        }, 500); // Increased delay to ensure slide transition is complete
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', function() {
        console.log('Next button clicked');
        
        // Mark user interaction
        document.querySelectorAll('#second-video-carousel .video-preview-container').forEach(container => {
          container.classList.add('user-interacted');
        });
        
        // Stop all videos before navigation
        stopAllVideos();
        
        // Store the current slide before navigation
        const previousSlideIndex = currentSlide;
        
        // Navigate to next slide
        nextSlide();
        console.log(`Navigated from slide ${previousSlideIndex} to slide ${currentSlide}`);
        
        // Auto-play the new video after navigation with a longer delay to ensure everything is ready
        setTimeout(() => {
          console.log(`Auto-playing video for slide ${currentSlide}`);
          if (currentSlide >= 0 && currentSlide < totalSlides) {
            // Double-check that no video is currently playing
            if (currentlyPlayingVideo === null) {
              playVideo(currentSlide);
            } else {
              console.log(`Video ${currentlyPlayingVideo} is still playing, waiting...`);
              // Wait a bit more and try again
              setTimeout(() => {
                if (currentlyPlayingVideo === null) {
                  playVideo(currentSlide);
                }
              }, 200);
            }
          }
        }, 500); // Increased delay to ensure slide transition is complete
      });
    }
    
    // Dot navigation
    const dots = document.querySelectorAll('#second-carousel-dots .carousel-dot');
    dots.forEach((dot, index) => {
      dot.addEventListener('click', function() {
        console.log(`Dot ${index} clicked`);
        
        // Mark user interaction
        document.querySelectorAll('#second-video-carousel .video-preview-container').forEach(container => {
          container.classList.add('user-interacted');
        });
        
        // Stop all videos before navigation
        stopAllVideos();
        
        // Store the current slide before navigation
        const previousSlideIndex = currentSlide;
        
        // Navigate to selected slide
        goToSlide(index);
        console.log(`Navigated from slide ${previousSlideIndex} to slide ${index}`);
        
        // Auto-play the new video after navigation with a longer delay to ensure everything is ready
        setTimeout(() => {
          console.log(`Auto-playing video for slide ${index}`);
          if (index >= 0 && index < totalSlides) {
            // Double-check that no video is currently playing
            if (currentlyPlayingVideo === null) {
              playVideo(index);
            } else {
              console.log(`Video ${currentlyPlayingVideo} is still playing, waiting...`);
              // Wait a bit more and try again
              setTimeout(() => {
                if (currentlyPlayingVideo === null) {
                  playVideo(index);
                }
              }, 200);
            }
          }
        }, 500); // Increased delay to ensure slide transition is complete
      });
    });
    
    // Start autoplay after page load
    startAutoplay();
    
    // Auto-advance slides every 5 seconds (only if more than one slide and no video is playing)
    if (totalSlides > 1) {
      autoAdvanceInterval = setInterval(() => {
        // Only auto-advance if no video is currently playing
        if (currentlyPlayingVideo === null) {
          nextSlide();
        }
      }, 5000);
    }
  });
  
  // Clean up interval when component is destroyed
  document.addEventListener('beforeunload', function() {
    if (autoAdvanceInterval) {
      clearInterval(autoAdvanceInterval);
    }
  });
</script> 