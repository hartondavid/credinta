---
// Import SecondaryCTA component for use in this module
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
import Icon from "@components/ui/icons/Icon.astro";

// Define props from Astro
const { pricing } = Astro.props;

// Define TypeScript type for products.
type Product = {
  name: string;
  description: string;
  price: string;
  cents: string;
  billingFrequency: string;
  features: Array<string>;
  purchaseBtnTitle: string;
  purchaseLink: string;
};

interface PricingSectionProps {
  title: string;
  subTitle: string;
  badge: string;
  thirdOption: string;
  btnText: string;
  pricing: {
    title: string;
    subTitle: string;
    starterKit: Product;
    professionalToolbox: Product;
  };
}
---

<section
  class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
>
  <!-- Section heading and sub-heading -->
  <div class="mx-auto mb-10 max-w-2xl text-center lg:mb-14">
    <h2
      class="fade-in-element text-2xl font-bold tracking-tight text-balance text-neutral-800 md:text-4xl md:leading-tight dark:text-neutral-200"
      data-delay="0"
    >
      {pricing.title}
    </h2>
    <p
      class="fade-in-element mt-1 text-pretty text-neutral-600 dark:text-neutral-400"
      data-delay="200"
    >
      {pricing.subTitle}
    </p>
  </div>
  <!-- Contains two main product blocks -->
  <div class="flex flex-wrap items-center justify-center gap-4 sm:gap-0">
    <!-- Starter Kit product details -->
    <div
      class="fade-in-element w-full rounded-xl bg-gray-800 p-6 text-center sm:w-1/2 sm:rounded-r-none sm:p-8 lg:w-1/3"
      data-delay="400"
    >
      <div class="mb-4">
        <h3 class="text-2xl font-bold text-neutral-100 sm:text-3xl">
          {pricing.starterKit.name}
        </h3>
        <p class="text-indigo-300">{pricing.starterKit.description}</p>
      </div>

      <div class="mb-4">
        <span class="text-4xl font-bold text-neutral-200"
          >{pricing.starterKit.price}</span
        >
        <span class="text-lg font-bold text-neutral-300"
          >{pricing.starterKit.cents}</span
        >
        <span class="ms-3 text-sm text-indigo-200"
          >{pricing.starterKit.billingFrequency}</span
        >
      </div>
      <!-- Features list - automatically created by mapping over `features` array -->
      <ul class="mb-6 space-y-2 text-neutral-300">
        {
          pricing.starterKit.features.map((feature: string, index: number) => (
            <li
              class="fade-in-element flex items-center justify-center gap-1.5"
              data-delay={600 + index * 50}
            >
              <Icon name="checkCircle" />

              <span>{feature}</span>
            </li>
          ))
        }
      </ul>
      <!-- CTA for purchasing the product -->
      <a
        href={pricing.starterKit.purchaseLink}
        class="block rounded-lg bg-gray-500 px-8 py-3 text-center text-sm font-bold text-gray-100 ring-indigo-300 outline-hidden transition duration-100 hover:bg-gray-600 focus-visible:ring-3 active:text-gray-300 md:text-base"
        >{pricing.starterKit.purchaseBtnTitle}</a
      >
    </div>
    <!-- Professional Toolbox product details -->
    <div
      class="fade-in-element w-full rounded-xl bg-linear-to-tr from-[#FF512F] to-[#F09819] p-6 text-center shadow-xl sm:w-1/2 sm:p-8"
      data-delay="600"
    >
      <div
        class="mb-4 flex flex-col items-center justify-between gap-4 lg:flex-row"
      >
        <div>
          <h3 class="text-2xl font-bold text-neutral-100 sm:text-3xl">
            {pricing.professionalToolbox.name}
          </h3>
          <p class="text-yellow-200">
            {pricing.professionalToolbox.description}
          </p>
        </div>

        <span
          class="bg-opacity-50 order-first inline-block rounded-full bg-orange-200/60 px-3 py-1 text-center text-xs font-bold tracking-wider text-orange-600 uppercase lg:order-none"
          >{pricing.badge}</span
        >
      </div>

      <div class="mb-4">
        <span class="text-6xl font-bold text-neutral-100"
          >{pricing.professionalToolbox.price}</span
        >
        <span class="text-lg font-bold text-orange-100"
          >{pricing.professionalToolbox.cents}</span
        >
        <span class="ms-3 text-orange-200"
          >{pricing.professionalToolbox.billingFrequency}</span
        >
      </div>
      <!-- Features list - automatically created by mapping over `features` array -->
      <ul class="mb-6 space-y-2 text-orange-100">
        {
          pricing.professionalToolbox.features.map(
            (feature: string, index: number) => (
              <li
                class="fade-in-element flex items-center justify-center gap-1.5"
                data-delay={800 + index * 50}
              >
                <Icon name="checkCircle" />

                <span>{feature}</span>
              </li>
            ),
          )
        }
      </ul>
      <!-- CTA for purchasing the product -->
      <a
        href={pricing.professionalToolbox.purchaseLink}
        class="bg-opacity-50 block rounded-lg bg-orange-200/40 px-8 py-3 text-center text-sm font-bold text-neutral-100 ring-orange-300 outline-hidden transition duration-300 hover:bg-orange-300 focus-visible:ring-3 active:bg-orange-400 md:text-base"
        >{pricing.professionalToolbox.purchaseBtnTitle}</a
      >
    </div>
  </div>
  <!-- Call to action for Enterprise Solutions -->
  <div
    class="fade-in-element mt-8 flex items-center justify-center gap-x-3 md:mt-12"
    data-delay="1000"
  >
    <p class="text-sm text-neutral-600 dark:text-neutral-400">
      {pricing.thirdOption}
    </p>

    <SecondaryCTA title={pricing.btnText} url="#" />
  </div>
</section>

<style>
  .fade-in-element {
    opacity: 0;
    transform: translateY(30px);
    transition:
      opacity 0.8s ease-out,
      transform 0.8s ease-out;
  }

  .fade-in-element.fade-in {
    opacity: 1;
    transform: translateY(0);
  }

  /* Staggered animation delays */
  .fade-in-element[data-delay="0"] {
    transition-delay: 0ms;
  }
  .fade-in-element[data-delay="200"] {
    transition-delay: 200ms;
  }
  .fade-in-element[data-delay="400"] {
    transition-delay: 400ms;
  }
  .fade-in-element[data-delay="600"] {
    transition-delay: 600ms;
  }
  .fade-in-element[data-delay="800"] {
    transition-delay: 800ms;
  }
  .fade-in-element[data-delay="1000"] {
    transition-delay: 1000ms;
  }
  .fade-in-element[data-delay="1100"] {
    transition-delay: 1100ms;
  }
  .fade-in-element[data-delay="1200"] {
    transition-delay: 1200ms;
  }
  .fade-in-element[data-delay="1300"] {
    transition-delay: 1300ms;
  }
  .fade-in-element[data-delay="1400"] {
    transition-delay: 1400ms;
  }
  .fade-in-element[data-delay="1500"] {
    transition-delay: 1500ms;
  }
  .fade-in-element[data-delay="1600"] {
    transition-delay: 1600ms;
  }
  .fade-in-element[data-delay="1700"] {
    transition-delay: 1700ms;
  }
  .fade-in-element[data-delay="1800"] {
    transition-delay: 1800ms;
  }
  .fade-in-element[data-delay="1900"] {
    transition-delay: 1900ms;
  }
  .fade-in-element[data-delay="2000"] {
    transition-delay: 2000ms;
  }
</style>

<script>
  // Intersection Observer for fade-in animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: "0px 0px -50px 0px",
  };

  const fadeInObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const element = entry.target as HTMLElement;
        const delay = parseInt(element.dataset.delay || "0");

        setTimeout(() => {
          element.classList.add("fade-in");
        }, delay);

        // Unobserve after animation is triggered
        fadeInObserver.unobserve(element);
      }
    });
  }, observerOptions);

  // Observe all fade-in elements
  document.addEventListener("DOMContentLoaded", () => {
    const fadeElements = document.querySelectorAll(".fade-in-element");
    fadeElements.forEach((element) => {
      fadeInObserver.observe(element);
    });
  });
</script>
