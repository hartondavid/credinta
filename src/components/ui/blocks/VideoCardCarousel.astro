---
// Import AvatarTestimonialSection component for use in this module
import AvatarTestimonialSection from "@/components/ui/avatars/AvatarTestimonialSection.astro";
import FormatQuoteIcon from '@mui/icons-material/FormatQuote';

// Define props from Astro
const { title, videos } = Astro.props;

// Define TypeScript interface for Video
interface Video {
  id: string;
  title: string;
// description?: string;
  thumbnail?: string;
  youtubeId: string;
  duration?: string;
  views?: string;
  date?: string;
//   author?: string;
//   avatarSrc?: string;
//   role?: string;
}

// Define TypeScript interface for props
interface Props {
  title: string;
  videos: Video[];
}

// Function to generate YouTube thumbnail URL
function getYouTubeThumbnail(youtubeId: string): string {
  const cleanId = youtubeId.trim();
  return `https://img.youtube.com/vi/${cleanId}/hqdefault.jpg`;
}
---

<!-- Main div that wraps the videos section -->
<section
  class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
  id="videos"
>
  <!-- Title of the videos section -->
  <div class="mb-6 mx-auto w-3/4 max-w-2xl text-center sm:mb-10 md:mb-16 lg:mx-0 lg:w-1/2 lg:text-left">
    <h2
      class="text-balance text-2xl font-bold text-black dark:text-white sm:text-3xl lg:text-4xl text-center lg:text-left"
    >
    <Fragment set:html={title} />
    </h2>
  </div>

  <!-- Videos Carousel -->
  <div class="relative">
    <!-- Carousel Container -->
    <div class="videos-carousel overflow-hidden">
      <div class="flex transition-transform duration-500 ease-out" id="videos-track">
        {
          videos.map((video, index) => (
            <div 
              class="video-card fade-in-element flex-shrink-0 w-full sm:w-1/2 lg:w-1/3 xl:w-1/4 px-4" 
              id={`video-${index}`}
              data-delay={index * 50}
            >
              <div class="flex h-auto">
                <div class="flex flex-col rounded-xl bg-neutral-50 dark:bg-neutral-700 h-full">
                  <!-- Video Container -->
                  <div class="relative aspect-video overflow-hidden rounded-t-xl">
                    <!-- YouTube Video Player -->
                    <iframe
                      class="h-full w-full"
                      src={`https://www.youtube.com/embed/${video.youtubeId}?autoplay=1&mute=1&rel=0&modestbranding=1&showinfo=0&controls=1&fs=1&color=white&theme=dark&cc_load_policy=1&playsinline=1&enablejsapi=1&loop=1&playlist=${video.youtubeId}`}
                      frameborder="0"
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                      allowfullscreen
                      loading="lazy"
                    ></iframe>
                    
                    <!-- Video Duration Badge -->
                    {video.duration && (
                      <div class="absolute bottom-3 right-3 bg-black/80 text-white text-sm px-3 py-1 rounded-full">
                        {video.duration}
                      </div>
                    )}
                  </div>

                  {/* <div class="flex-auto p-4 md:p-6">
                    <!-- Video title -->
                    <h4 class="text-lg font-semibold text-neutral-900 dark:text-white mb-3 line-clamp-2">
                      {video.title}
                    </h4>
                    
                    <!-- Video description -->
                    {video.description && (
                      <p class="text-sm text-neutral-600 dark:text-neutral-400 mb-4 line-clamp-3">
                        {video.description}
                      </p>
                    )}
                  </div> */}

                  <div class="rounded-b-xl bg-neutral-300/30 p-4 dark:bg-neutral-900/30 md:px-7">
                    <div class="flex items-center justify-between">
                      <!-- Author info -->
                      {video.title && (
                        <div class="flex items-center">
                         
                          <div class="ms-3 grow">
                            <p class="text-sm font-bold text-indigo-600 dark:text-yellow-400 sm:text-base">
                              {video.title}
                            </p>
                           
                          </div>
                        </div>
                      )}
                       
                      <!-- Video Stats -->
                      <div class="flex items-center gap-3 text-xs text-neutral-500 dark:text-neutral-400">
                        {video.views && (
                          <span class="flex items-center">
                            <svg class="h-3 w-3 mr-1" fill="currentColor" viewBox="0 0 24 24">
                              <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                            </svg>
                            {video.views}
                          </span>
                        )}
                        {video.date && (
                          <span>{video.date}</span>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <!-- Navigation Buttons -->
    <button
      class="absolute -left-2 top-1/2 -translate-y-1/2 rounded-full bg-white p-3 shadow-lg hover:bg-gray-50 dark:bg-neutral-800 dark:hover:bg-neutral-700 transition-all duration-200 z-50 cursor-pointer"
      id="videos-prev"
      aria-label="Previous videos"
      type="button"
    >
      <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
      </svg>
    </button>
    <button
      class="absolute -right-2 top-1/2 -translate-y-1/2 rounded-full bg-white p-3 shadow-lg hover:bg-gray-50 dark:bg-neutral-800 dark:hover:bg-neutral-700 transition-all duration-200 z-50 cursor-pointer"
      id="videos-next"
      aria-label="Next videos"
      type="button"
    >
      <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
      </svg>
    </button>

    <!-- Dots Navigation -->
    <div class="flex justify-center mt-8 space-x-2" id="videos-dots">
      {videos.map((_, index) => (
        <button
          class={`h-3 w-3 rounded-full transition-colors ${
            index === 0 ? "bg-indigo-600 dark:bg-yellow-400" : "bg-gray-300 dark:bg-gray-600"
          }`}
          data-index={index}
          aria-label={`Go to video ${index + 1}`}
        ></button>
      ))}
    </div>
  </div>
</section>


<style>
  .videos-carousel {
    position: relative;
  }

  .video-card {
    transition: all 0.3s ease;
    flex-shrink: 0;
  }

  .video-card:hover {
    transform: translateY(-5px);
  }

  /* Fade-in animation styles */
  .fade-in-element {
    opacity: 0;
    transform: translateY(30px);
    transition:
      opacity 0.8s ease-out,
      transform 0.8s ease-out;
  }

  .fade-in-element.fade-in {
    opacity: 1;
    transform: translateY(0);
  }

  /* Staggered animation delays */
  .fade-in-element[data-delay="0"] {
    transition-delay: 0ms;
  }
  .fade-in-element[data-delay="50"] {
    transition-delay: 50ms;
  }
  .fade-in-element[data-delay="100"] {
    transition-delay: 100ms;
  }
  .fade-in-element[data-delay="150"] {
    transition-delay: 150ms;
  }
  .fade-in-element[data-delay="200"] {
    transition-delay: 200ms;
  }
  .fade-in-element[data-delay="250"] {
    transition-delay: 250ms;
  }
  .fade-in-element[data-delay="300"] {
    transition-delay: 300ms;
  }
  .fade-in-element[data-delay="350"] {
    transition-delay: 350ms;
  }
  .fade-in-element[data-delay="400"] {
    transition-delay: 400ms;
  }
  .fade-in-element[data-delay="450"] {
    transition-delay: 450ms;
  }
  .fade-in-element[data-delay="500"] {
    transition-delay: 500ms;
  }

  /* Line clamp utility for text truncation */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Scroll navigation styles */
  #videos-track {
    cursor: grab;
    user-select: none;
    display: flex;
    transition: transform 0.3s ease-out;
  }

  #videos-track:active {
    cursor: grabbing;
  }

  /* Navigation buttons styles */
  #videos-prev,
  #videos-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 50;
    cursor: pointer;
    pointer-events: auto;
    background: white;
    border: none;
    border-radius: 50%;
    padding: 12px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    transition: all 0.2s ease;
    min-width: 48px;
    min-height: 48px;
    display: flex !important;
    align-items: center;
    justify-content: center;
    opacity: 1 !important;
    visibility: visible !important;
  }

  #videos-prev {
    left: -8px;
  }

  #videos-next {
    right: -8px;
  }

  #videos-prev:hover,
  #videos-next:hover {
    transform: translateY(-50%) scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    background-color: #f9fafb;
  }

  #videos-prev:active,
  #videos-next:active {
    transform: translateY(-50%) scale(0.95);
  }

  /* Video modal styles */
  #videoModal {
    backdrop-filter: blur(5px);
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .video-card {
      width: 100%;
      min-width: 100%;
    }
    
    #videos-prev,
    #videos-next {
      padding: 6px;
      min-width: 36px;
      min-height: 36px;
    }
    
    #videos-prev svg,
    #videos-next svg {
      width: 14px;
      height: 14px;
    }
  }

  @media (min-width: 641px) and (max-width: 1024px) {
    .video-card {
      width: 50%;
      min-width: 50%;
    }
    
    #videos-prev,
    #videos-next {
      display: flex;
      opacity: 1;
      visibility: visible;
    }
  }

  @media (min-width: 1025px) {
    .video-card {
      width: 33.333333%;
      min-width: 33.333333%;
    }
    
    #videos-prev,
    #videos-next {
      display: flex;
      opacity: 1;
      visibility: visible;
    }
  }

  @media (min-width: 1280px) {
    .video-card {
      width: 25%;
      min-width: 25%;
    }
    
    #videos-prev,
    #videos-next {
      display: flex;
      opacity: 1;
      visibility: visible;
    }
  }
</style>

<script>
  // Simple videos carousel functionality
  document.addEventListener("DOMContentLoaded", function() {
    console.log("DOM Content Loaded - Initializing videos carousel...");
    
    var track = document.getElementById("videos-track");
    var prevBtn = document.getElementById("videos-prev");
    var nextBtn = document.getElementById("videos-next");
    var dots = document.querySelectorAll("#videos-dots button");
    
    console.log("Elements found:", {
      track: !!track,
      prevBtn: !!prevBtn,
      nextBtn: !!nextBtn,
      dotsCount: dots ? dots.length : 0,
      windowWidth: window.innerWidth,
      windowHeight: window.innerHeight
    });
    
    if (!track || !prevBtn || !nextBtn) {
      console.error("Videos carousel elements not found", {
        track: !!track,
        prevBtn: !!prevBtn,
        nextBtn: !!nextBtn,
        dots: !!(dots && dots.length > 0)
      });
      return;
    }

    var currentIndex = 0;
    var totalVideos = dots ? dots.length : 0;
    var cardsPerView = window.innerWidth >= 1280 ? 4 : window.innerWidth >= 1024 ? 3 : window.innerWidth >= 640 ? 2 : 1;
    var autoAdvanceInterval: ReturnType<typeof setInterval> | null = null;

    function updateCarousel() {
      if (!track) return;
      
      var cardWidth = 100 / cardsPerView;
      var translateX = -currentIndex * cardWidth;
      if (track) track.style.transform = "translateX(" + translateX + "%)";
      
      console.log("Updating carousel:", { currentIndex: currentIndex, cardWidth: cardWidth, translateX: translateX, totalVideos: totalVideos });
      
      // Update dots
      if (dots && dots.length > 0) {
        dots.forEach(function(dot, index) {
          if (index === currentIndex) {
            dot.classList.remove("bg-gray-300", "dark:bg-gray-600");
            dot.classList.add("bg-indigo-600", "dark:bg-yellow-400");
          } else {
            dot.classList.remove("bg-indigo-600", "dark:bg-yellow-400");
            dot.classList.add("bg-gray-300", "dark:bg-gray-600");
          }
        });
      }
    }

    function nextSlide() {
      if (totalVideos <= 0) return;
      // Circular navigation - loop back to start
      currentIndex = (currentIndex + 1) % totalVideos;
      console.log("Next slide:", { currentIndex: currentIndex, totalVideos: totalVideos });
      updateCarousel();
    }

    function prevSlide() {
      if (totalVideos <= 0) return;
      // Circular navigation - loop to end
      currentIndex = currentIndex === 0 ? totalVideos - 1 : currentIndex - 1;
      console.log("Prev slide:", { currentIndex: currentIndex, totalVideos: totalVideos });
      updateCarousel();
    }

    function goToSlide(index: number) {
      if (totalVideos <= 0) return;
      currentIndex = index % totalVideos;
      if (currentIndex < 0) currentIndex += totalVideos;
      console.log("Go to slide:", { index: index, currentIndex: currentIndex, totalVideos: totalVideos });
      updateCarousel();
    }

    // Event listeners
    console.log("Adding event listeners...", {
      totalVideos: totalVideos,
      cardsPerView: cardsPerView,
      hasTrack: !!track,
      hasPrevBtn: !!prevBtn,
      hasNextBtn: !!nextBtn,
      hasDots: !!(dots && dots.length > 0)
    });
    
    if (prevBtn) {
      prevBtn.addEventListener("click", function(e) {
        console.log("Prev button clicked", { totalVideos: totalVideos });
        e.preventDefault();
        e.stopPropagation();
        prevSlide();
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener("click", function(e) {
        console.log("Next button clicked", { totalVideos: totalVideos });
        e.preventDefault();
        e.stopPropagation();
        nextSlide();
      });
    }

    if (dots && dots.length > 0) {
      dots.forEach(function(dot, index) {
        dot.addEventListener("click", function() {
          console.log("Dot clicked", { index: index, totalVideos: totalVideos });
          goToSlide(index);
        });
      });
    }

    // Keyboard navigation
    document.addEventListener("keydown", function(e) {
      if (e.key === "ArrowLeft") {
        e.preventDefault();
        console.log("Left arrow key pressed", { totalVideos: totalVideos });
        prevSlide();
      } else if (e.key === "ArrowRight") {
        e.preventDefault();
        console.log("Right arrow key pressed", { totalVideos: totalVideos });
        nextSlide();
      }
    });

    // Touch/swipe navigation
    if (track) {
      var startX = 0;
      var endX = 0;
      var isDragging = false;
      var startTime = 0;

      track.addEventListener("touchstart", function(e) {
        startX = e.touches[0].clientX;
        startTime = Date.now();
        isDragging = true;
      });

      track.addEventListener("touchmove", function(e) {
        if (!isDragging) return;
        endX = e.touches[0].clientX;
      });

      track.addEventListener("touchend", function() {
        if (!isDragging) return;
        isDragging = false;
        
        var diffX = startX - endX;
        var diffTime = Date.now() - startTime;
        var minSwipeDistance = 50;
        var maxSwipeTime = 300;
        
        if (Math.abs(diffX) > minSwipeDistance && diffTime < maxSwipeTime) {
          if (diffX > 0) {
            console.log("Swipe right detected", { diffX: diffX, totalVideos: totalVideos });
            nextSlide();
          } else {
            console.log("Swipe left detected", { diffX: diffX, totalVideos: totalVideos });
            prevSlide();
          }
        }
      });
    }

    // Mouse drag navigation for desktop
    if (track) {
      var isMouseDragging = false;
      var mouseStartX = 0;
      var mouseStartY = 0;
      var mouseCurrentX = 0;
      var mouseCurrentY = 0;

      track.addEventListener("mousedown", function(e) {
        isMouseDragging = true;
        mouseStartX = e.clientX;
        mouseStartY = e.clientY;
        if (track) track.style.cursor = "grabbing";
        e.preventDefault();
      });

      track.addEventListener("mousemove", function(e) {
        if (!isMouseDragging) return;
        
        mouseCurrentX = e.clientX;
        mouseCurrentY = e.clientY;
      });

      track.addEventListener("mouseup", function(e) {
        if (!isMouseDragging) return;
        
        isMouseDragging = false;
        if (track) track.style.cursor = "grab";
        
        var diffX = mouseStartX - mouseCurrentX;
        var diffY = mouseStartY - mouseCurrentY;
        var minDragDistance = 30;
        
        if (Math.abs(diffX) > minDragDistance || Math.abs(diffY) > minDragDistance) {
          if (Math.abs(diffX) > Math.abs(diffY)) {
            // Horizontal drag
            if (diffX > 0) {
              console.log("Mouse drag right", { diffX: diffX, totalVideos: totalVideos });
              nextSlide();
            } else {
              console.log("Mouse drag left", { diffX: diffX, totalVideos: totalVideos });
              prevSlide();
            }
          } else {
            // Vertical drag
            if (diffY > 0) {
              console.log("Mouse drag down", { diffY: diffY, totalVideos: totalVideos });
              nextSlide();
            } else {
              console.log("Mouse drag up", { diffY: diffY, totalVideos: totalVideos });
              prevSlide();
            }
          }
        }
      });

      track.addEventListener("mouseleave", function() {
        if (isMouseDragging) {
          isMouseDragging = false;
          if (track) track.style.cursor = "grab";
        }
      });
    }

    // Auto-advance
    if (totalVideos > 1) {
      console.log("Starting auto-advance", { totalVideos: totalVideos, interval: 5000 });
      // autoAdvanceInterval = setInterval(nextSlide, 5000);
    } else {
      console.log("No auto-advance - insufficient videos", { totalVideos: totalVideos });
    }

    if (track) {
      track.addEventListener("mouseenter", function() {
        if (autoAdvanceInterval) {
          console.log("Pausing auto-advance on mouse enter");
          clearInterval(autoAdvanceInterval);
          autoAdvanceInterval = null;
        }
      });

      track.addEventListener("mouseleave", function() {
        if (!autoAdvanceInterval) {
          console.log("Resuming auto-advance on mouse leave");
          // autoAdvanceInterval = setInterval(nextSlide, 5000);
        }
      });
    }

    // Handle window resize
    window.addEventListener("resize", function() {
      var newCardsPerView = window.innerWidth >= 1280 ? 4 : window.innerWidth >= 1024 ? 3 : window.innerWidth >= 640 ? 2 : 1;
      if (newCardsPerView !== cardsPerView) {
        console.log("Window resized, updating cards per view", { 
          old: cardsPerView, 
          new: newCardsPerView, 
          width: window.innerWidth,
          totalVideos: totalVideos 
        });
        cardsPerView = newCardsPerView;
        currentIndex = 0;
        if (totalVideos > 0) {
          updateCarousel();
        }
      }
    });

    // Initialize
    console.log("Carousel initialized successfully", { 
      totalVideos: totalVideos, 
      cardsPerView: cardsPerView,
      hasTrack: !!track,
      hasPrevBtn: !!prevBtn,
      hasNextBtn: !!nextBtn,
      hasDots: !!(dots && dots.length > 0)
    });
    if (totalVideos > 0) {
      updateCarousel();
    } else {
      console.log("No videos to display");
    }

    // Fade-in animation
    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const delay = entry.target.getAttribute('data-delay') || '0';
          console.log("Element intersecting, adding fade-in with delay", { delay: delay });
          setTimeout(() => {
            entry.target.classList.add('fade-in');
          }, parseInt(delay));
        }
      });
    }, observerOptions);
    
    const fadeElements = document.querySelectorAll('.fade-in-element');
    if (fadeElements && fadeElements.length > 0) {
      console.log("Setting up fade-in animation for", fadeElements.length, "elements");
      fadeElements.forEach((element) => {
        observer.observe(element);
      });
    } else {
      console.log("No fade-in elements found");
    }
  });
</script>
