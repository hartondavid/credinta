---
//Import relevant dependencies
import ThemeIcon from "@components/ThemeIcon.astro";
import NavLink from "@components/ui/links/NavLink.astro";
import Authentication from "../misc/Authentication.astro";
import enStrings from "@utils/navigation";
import frStrings from "@utils/fr/navigation";
import BrandLogo from "@components/BrandLogo.astro";
import LanguagePicker from "@components/ui/LanguagePicker.astro";
import logo from "@images/logo.png";
import Icon from "@components/ui/icons/Icon.astro";
import FooterSocialLink from "@components/ui/links/FooterSocialLink.astro";

// Select the correct translation based on the page's lang prop:
const strings = Astro.currentLocale === "fr" ? frStrings : enStrings;
const homeUrl = Astro.currentLocale === "fr" ? "/fr" : "/";
---

<!-- Main header component -->
<header
  class="sticky inset-x-0 top-4 z-50 flex w-full flex-wrap text-sm md:flex-nowrap md:justify-start"
>
  <!-- Navigation container -->
  <nav
    class="relative mx-2 w-full rounded-[36px] border border-yellow-100/40 bg-yellow-50/60 px-4 py-3 backdrop-blur-md md:flex md:items-center md:justify-between md:px-6 md:py-0 lg:px-8 xl:mx-auto dark:border-neutral-700/40 dark:bg-neutral-700/80 dark:backdrop-blur-md"
    aria-label="Global"
  >
    <div class="flex items-center justify-between">
      <!-- Brand logo -->
      <a
        class="logo-container flex-none rounded-lg text-xl font-bold ring-zinc-500 outline-hidden focus-visible:ring-3 dark:ring-zinc-200 dark:focus:outline-hidden"
        href={homeUrl}
        aria-label="Brand"
      >
        <!-- <BrandLogo class="h-auto w-24" /> -->
        <img
          src={logo.src}
          alt="Brand Logo"
          class="logo-image h-auto w-16 transition-all duration-700 ease-out hover:scale-110 sm:w-20 md:w-24 lg:w-28"
          id="navbar-logo"
        />
      </a>
      <div class="flex space-x-1">
        <FooterSocialLink url={strings.socialLinks.facebook}
          ><Icon name="facebookFooter" />
        </FooterSocialLink>
        <FooterSocialLink url={strings.socialLinks.instagram}
          ><Icon name="instagramFooter" />
        </FooterSocialLink>
        <FooterSocialLink url={strings.socialLinks.tiktok}
          ><Icon name="tiktokFooter" />
        </FooterSocialLink>
      </div>

      <!-- Church meeting time announcement -->
      <div
        class="ml-5 hidden min-w-[400px] items-center rounded-[10px] border-t-5 border-[#305c76] bg-gradient-to-r from-[#e0e3e3] to-[#ffffff] px-6 py-3 backdrop-blur-sm md:flex dark:border-[#74becc] dark:from-[#74becc]/30 dark:to-[#000000]/30"
      >
        <div class="flex items-center space-x-2">
          <!-- Church bell icon -->
          <svg
            class="h-10 w-10 text-[#305c76] dark:text-[#74becc]"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 17h5l-5 5v-5zM9 12l2 2 4-4M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            ></path>
          </svg>
          <div class="text-sm">
            <span class="ml-1 font-bold text-black dark:text-white"
              >În fiecare Duminică între orele 10:00-12:00</span
            >
          </div>
        </div>
      </div>
      <br />

      <!-- Church meeting time announcement -->
      <!-- <div
        class="ml-3 hidden min-w-[370px] items-center rounded-[10px] border-t-5 border-[#08BABE] bg-gradient-to-r from-[#e0e3e3] to-[#ffffff] px-6 py-3 backdrop-blur-sm md:flex dark:border-[#08BABE]/30 dark:from-[#74becc]/30 dark:to-[#000000]/30"
      >
        <div class="flex items-center space-x-2">
          <div class="text-sm">
            <span class="ml-1 font-bold text-black dark:text-white"
              >În timpul programului, copiii au activități separate specifice
              vârstei lor într-o sală la subsol.</span
            >
          </div>
        </div>
      </div> -->

      <!-- Collapse toggle for smaller screens -->
      <div class="mr-5 ml-auto md:hidden">
        <button
          type="button"
          class="hs-collapse-toggle flex h-8 w-8 items-center justify-center rounded-full text-sm font-bold text-black transition duration-300 hover:bg-neutral-200 disabled:pointer-events-none disabled:opacity-50 dark:text-white dark:hover:bg-neutral-700 dark:focus:outline-hidden"
          data-hs-collapse="#navbar-collapse-with-animation"
          aria-controls="navbar-collapse-with-animation"
          aria-label="Toggle navigation"
        >
          <svg
            class="hs-collapse-open:hidden h-[1.25rem] w-[1.25rem] shrink-0"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <line x1="3" x2="21" y1="6" y2="6"></line>
            <line x1="3" x2="21" y1="12" y2="12"></line>
            <line x1="3" x2="21" y1="18" y2="18"></line>
          </svg>
          <svg
            class="hs-collapse-open:block hidden h-[1.25rem] w-[1.25rem] shrink-0"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="M18 6 6 18"></path>
            <path d="m6 6 12 12"></path>
          </svg>
        </button>
      </div>
      <!-- ThemeIcon component specifically for smaller screens -->
      <span class="inline-block md:hidden">
        <ThemeIcon />
      </span>
    </div>
    <!-- Contains navigation links -->
    <div
      id="navbar-collapse-with-animation"
      class="hs-collapse hidden grow basis-full overflow-hidden transition-all duration-300 md:block"
    >
      <!-- Navigation links container -->
      <div
        class="mt-5 flex flex-col gap-x-0 gap-y-4 md:mt-0 md:flex-row md:items-center md:justify-end md:gap-x-4 md:gap-y-0 md:ps-7 lg:gap-x-7"
      >
        <!-- Church meeting time announcement for mobile -->
        <div
          class="flex items-center justify-center rounded-[10px] border-t-5 border-[#305c76] bg-gradient-to-r from-[#e0e3e3] to-[#ffffff] px-4 py-3 backdrop-blur-sm md:hidden dark:border-[#74becc] dark:from-[#74becc]/30 dark:to-[#000000]/30"
        >
          <div class="flex items-center space-x-2">
            <!-- Church bell icon -->
            <svg
              class="h-5 w-5 text-[#305c76] dark:text-[#74becc]"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 17h5l-5 5v-5zM9 12l2 2 4-4M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
            <div class="text-center text-sm">
              <span class="ml-1 font-bold text-black dark:text-white"
                >În fiecare Duminică între orele 10:00-12:00</span
              >
            </div>
          </div>
        </div>

        <!-- <div
          class="flex items-center justify-center rounded-[10px] border-t-5 border-[#08BABE] bg-gradient-to-r from-[#e0e3e3] to-[#ffffff] px-4 py-3 backdrop-blur-sm md:hidden dark:border-[#08BABE]/30 dark:from-[#74becc]/30 dark:to-[#000000]/30"
        >
          <div class="flex items-center space-x-2">
            <div class="text-center text-sm">
              <span class="ml-1 font-bold text-black dark:text-white"
                >În timpul programului, copii au activități separate specifice
                vârstei lor într-o sală la subsol.</span
              >
            </div>
          </div>
        </div> -->

        <!-- Navigation links and Authentication component -->
        {
          strings.navBarLinks.map((link) => (
            <NavLink url={link.url} name={link.name} />
          ))
        }

        <!-- <Authentication /> -->
        <LanguagePicker />
        <!-- ThemeIcon component specifically for larger screens -->
        <span class="hidden md:inline-block">
          <ThemeIcon />
        </span>
      </div>
    </div>
  </nav>
</header>

<style>
  /* Logo zoom transition styles */
  .logo-container {
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: visible; /* Changed from hidden to visible to allow logo to go outside navbar */
    border-radius: 0.5rem;
    position: relative;
    z-index: 10; /* Ensure logo appears above other elements during animation */
  }

  .logo-image {
    transform-origin: center;
    will-change: transform, opacity;
    /* Initial state - logo is scaled up much larger and invisible */
    transform: scale(4); /* Increased from 2 to 4 for more dramatic effect */
    opacity: 0;
    transition: all 0.7s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Logo animation on page load */
  .logo-image.loaded {
    transform: scale(1);
    opacity: 1;
  }

  .logo-image:hover {
    transform: scale(1.1);
  }

  /* Optional: Add a subtle shadow on hover for better visual feedback */
  .logo-container:hover .logo-image {
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.1));
  }

  /* Dark mode shadow adjustment */
  .dark .logo-container:hover .logo-image {
    filter: drop-shadow(0 4px 8px rgba(255, 255, 255, 0.1));
  }

  /* Add a subtle background on hover for better visual feedback */
  .logo-container:hover {
    background-color: rgba(255, 255, 255, 0.1);
    transition: background-color 0.3s ease;
  }

  .dark .logo-container:hover {
    background-color: rgba(0, 0, 0, 0.1);
  }
</style>

<!-- Theme Appearance script to manage light/dark modes -->
<script is:inline>
  // Logo zoom-in animation on page load
  document.addEventListener("DOMContentLoaded", function () {
    const logo = document.getElementById("navbar-logo");
    if (logo) {
      // Add a small delay to ensure the page is fully loaded
      setTimeout(() => {
        logo.classList.add("loaded");
      }, 300);
    }
  });

  const HSThemeAppearance = {
    init() {
      const defaultTheme = "default";
      let theme = localStorage.getItem("hs_theme") || defaultTheme;

      if (document.querySelector("html").classList.contains("dark")) return;
      this.setAppearance(theme);
    },
    _resetStylesOnLoad() {
      const $resetStyles = document.createElement("style");
      $resetStyles.innerText = `*{transition: unset !important;}`;
      $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
      document.head.appendChild($resetStyles);
      return $resetStyles;
    },
    setAppearance(theme, saveInStore = true, dispatchEvent = true) {
      const $resetStylesEl = this._resetStylesOnLoad();

      if (saveInStore) {
        localStorage.setItem("hs_theme", theme);
      }

      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }

      document.querySelector("html").classList.remove("dark");
      document.querySelector("html").classList.remove("default");
      document.querySelector("html").classList.remove("auto");

      document
        .querySelector("html")
        .classList.add(this.getOriginalAppearance());

      setTimeout(() => {
        $resetStylesEl.remove();
      });

      if (dispatchEvent) {
        window.dispatchEvent(
          new CustomEvent("on-hs-appearance-change", { detail: theme }),
        );
      }
    },
    getAppearance() {
      let theme = this.getOriginalAppearance();
      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }
      return theme;
    },
    getOriginalAppearance() {
      const defaultTheme = "default";
      return localStorage.getItem("hs_theme") || defaultTheme;
    },
  };
  HSThemeAppearance.init();

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", () => {
      if (HSThemeAppearance.getOriginalAppearance() === "auto") {
        HSThemeAppearance.setAppearance("auto", false);
      }
    });

  window.addEventListener("load", () => {
    const $clickableThemes = document.querySelectorAll(
      "[data-hs-theme-click-value]",
    );
    const $switchableThemes = document.querySelectorAll(
      "[data-hs-theme-switch]",
    );

    $clickableThemes.forEach(($item) => {
      $item.addEventListener("click", () =>
        HSThemeAppearance.setAppearance(
          $item.getAttribute("data-hs-theme-click-value"),
          true,
          $item,
        ),
      );
    });

    $switchableThemes.forEach(($item) => {
      $item.addEventListener("change", (e) => {
        HSThemeAppearance.setAppearance(e.target.checked ? "dark" : "default");
      });

      $item.checked = HSThemeAppearance.getAppearance() === "dark";
    });

    window.addEventListener("on-hs-appearance-change", (e) => {
      $switchableThemes.forEach(($item) => {
        $item.checked = e.detail === "dark";
      });
    });
  });
</script>
