---
// Define props from Astro
const {
  heading,
  content,
  isAddressVisible,
  addressContent,
  isLinkVisible,
  linkTitle,
  linkURL,
  isArrowVisible,
  mapEmbedURL,
  mapLinkURL,
  locationButtonTitle,
  showAddressOnMap,
  showMapPinOverlay,
  copyButton,
} = Astro.props;

// Define TypeScript interface for props
interface Props {
  heading?: string;
  content?: string | string[];
  isAddressVisible?: boolean;
  addressContent?: string;
  isLinkVisible?: boolean;
  linkTitle?: string;
  linkURL?: string;
  isArrowVisible?: boolean;
  mapEmbedURL?: string;
  mapLinkURL?: string;
  locationButtonTitle?: string;
  showAddressOnMap?: boolean;
  showMapPinOverlay?: boolean;
  copyButton?: {
    text: string;
    iban: string;
  };
}

// Define SVG arrow to be used in the component
const arrowSVG: string = `<svg
class="h-4 w-4 shrink-0 transition ease-in-out group-hover:translate-x-1"
fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" >
<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" /> </svg>`;

// Simple map pin SVG used for overlaying on the map thumbnail
const mapPinSVG: string = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-8 w-8 text-red-500 drop-shadow-[0_1px_1px_rgba(0,0,0,0.6)]">
  <path fill-rule="evenodd" d="M11.47 3.84a6.75 6.75 0 0 1 9.53 9.53l-6.72 6.72a2.25 2.25 0 0 1-3.18 0l-6.72-6.72a6.75 6.75 0 0 1 7.09-9.53Zm.53 5.91a2.25 2.25 0 1 0 4.5 0 2.25 2.25 0 0 0-4.5 0Z" clip-rule="evenodd"/>
</svg>`;
---

<!-- Root container, which arranges the heading and content -->
<div class="flex gap-x-7 py-6">
  <!-- Slot to allow for extensibility of the component -->
  <slot />
  <div class="grow">
    <!-- Heading of the section -->
    <h3 class="text-2xl font-bold text-black dark:text-white">
      {heading}
    </h3>
    <!-- Content of the section -->
    {
      Array.isArray(content) ? (
        content.map((paragraph, index) => (
          <p class="mt-1 text-lg text-black dark:text-white">{paragraph}</p>
        ))
      ) : content ? (
        // Check if content looks like a phone number and make it clickable
        content.toString().match(/^[\d\s\+\-\(\)]+$/) ? (
          <a
            href={`tel:${content.toString().replace(/\s/g, "")}`}
            class="mt-1 cursor-pointer text-lg text-black transition-colors duration-200 hover:text-blue-600 dark:text-white dark:hover:text-blue-400"
          >
            {content}
          </a>
        ) : // Check if content looks like an email and make it clickable
        content.toString().match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/) ? (
          <a
            href={`mailto:${content}`}
            class="mt-1 cursor-pointer text-lg text-black transition-colors duration-200 hover:text-blue-600 dark:text-white dark:hover:text-blue-400"
          >
            {content}
          </a>
        ) : (
          <p class="mt-1 text-lg text-black dark:text-white">{content}</p>
        )
      ) : null
    }
    <!-- Conditional rendering of address content if isAddressVisible is true -->
    {
      isAddressVisible ? (
        <p class="mt-1 text-sm text-neutral-500 italic">{addressContent}</p>
      ) : null
    }
    <!-- Conditional rendering of a link if isLinkVisible is true.
         The link also conditionally includes an arrow SVG if isArrowVisible is true -->
    {
      isLinkVisible ? (
        <a
          class="group mt-2 inline-flex items-center gap-x-2 rounded-lg text-sm font-medium text-zinc-600 ring-zinc-500 outline-hidden transition duration-300 hover:text-zinc-800 focus-visible:ring-3 dark:text-zinc-400 dark:ring-zinc-200 dark:hover:text-zinc-200 dark:focus:ring-1 dark:focus:outline-hidden"
          href={linkURL}
        >
          {linkTitle}
          {isArrowVisible ? <Fragment set:html={arrowSVG} /> : null}
        </a>
      ) : null
    }

    <!-- Copy button for IBAN -->
    {
      copyButton ? (
        <button
          onclick={`copyIBAN('${copyButton.iban}', event)`}
          class="mt-3 inline-flex items-center gap-2 rounded-md bg-[#305c76] px-3 py-2 text-sm font-medium text-white transition-colors hover:bg-[#305c76] focus:ring-2 focus:ring-[#305c76] focus:ring-offset-2 focus:outline-none dark:bg-[#74becc] dark:text-neutral-800 dark:hover:bg-[#74becc] dark:focus:ring-offset-gray-900"
          title="Copiază IBAN-ul"
        >
          <svg
            class="h-4 w-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
            />
          </svg>
          {copyButton.text}
        </button>
      ) : null
    }

    {
      mapEmbedURL ? (
        <div class="relative mt-3 overflow-hidden rounded-lg border border-neutral-200 dark:border-neutral-700">
          <iframe
            src={mapEmbedURL}
            loading="lazy"
            referrerpolicy="no-referrer-when-downgrade"
            class="h-40 w-full"
            allowfullscreen
            aria-label="Harta locației"
          />
          {showMapPinOverlay ? (
            <div class="pointer-events-none absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-[60%]">
              <Fragment set:html={mapPinSVG} />
            </div>
          ) : null}
          {showAddressOnMap && addressContent ? (
            <div class="pointer-events-none absolute inset-x-2 bottom-2 rounded-md bg-black/60 px-3 py-2 text-[11px] font-medium text-white shadow-sm backdrop-blur-sm">
              {addressContent}
            </div>
          ) : null}
        </div>
      ) : null
    }
  </div>
</div>
